# Ejercicios finales

## **Extracción de información de archivos fastq**

En este ejercicio se obtendrá información de archivos fastq, que cotienen secuencias de nucleótidos y la calidad de su proceso de secuenciación. Para esto usaremos los archivos `secuencias1.fastq`, `secuencias2.fastq` y `secuencias3.fastq` que se encuentra en la carpeta `_files` dentro del directorio raíz del repositorio de GitHub [unix.bioinfo.rsgecuador](https://github.com/RSG-Ecuador/unix.bioinfo.rsgecuador/tree/gh-pages) .

## Búsqueda de motivos en archivo fasta de una secuencia de nucleótidos

1.- En este ejercicio se obtendrá información de un archivo fasta, que contiene la secuencia de nucleótidos de un gen de un microorganismo. Para esto usaremos el archivo `secuencia1.fasta` que se encuentra en la carpeta `_files` dentro del directorio raíz del repositorio de GitHub

En las secuencias de ADN se encuentran varios motivos (secuencias pequeñas muy conservadas) como los que dan inicio y término a los procesos de replicación, transcripción y traducción. La señal para el inicio de la transcripción es dada por la presencia de la TATA box (*TATAAA* o *TATAAT*) y la señal para el término de la transcripción es la presencia de varias Adeninas (5 o más), con lo que se obtiene un transcrito (ARN mensajero). Determinar el número de señales de inicio y de terminación del archivo `secuencia1.fasta` y establecer si hay igual número de señales de inicio y terminación.

::: {.callout-note code-copy="true" eval="false" collapse="true"}
```         
# Opción 1
# Señales de inicio 
grep -E -c "TATAAA|TATAAT"  secuencia1.fasta
# Señales de terminación 
grep -E -c "A{5,}"  secuencia1.fasta
```
:::

# Extracción de información de archivo multifasta de genomas

2.- En este ejercicio se obtendrá información de un archivo multifasta, compuestos por varias secuencias de nucleótidos, en el que cada secuencia es un genoma completo de diferentes cepas o muestras de *Sulcia muelleri* (un endosimbionte de insectos). Para esto usaremos el archivo `sul_genomas.fasta` que se encuentra en la carpeta `_files` dentro del directorio raíz del repositorio de GitHub

Se debe considerar que en un archivo multifasta cada secuencia posee un header que empieza con el caracter `>`. Determinar cuántos genomas en total se encuentran en el archivo `sul_genomas.fasta`

::: {.callout-note code-copy="true" eval="false" collapse="true"}
```         
# Opción 1
grep -E -c ">"  sul_genomas.fasta
```

```         
# Opción 2
grep ">"  sul_genomas.fasta | wc -l
```
:::

::: {.callout-note code-copy="true" eval="false" collapse="true"}
Otra forma

grep "\>" sul_genomas.fasta \| head
:::

3.- Se desea identificar el nombre completo de las cepas o muestras de todas las secuencias del archivo `sul_genomas.fasta` y exportar estos códigos a un nuevo archivo llamado `nombres_sul_genomas.txt` en la carpeta `_files`. Por ejemplo, el nombre completo de una de las secuncias sería: `Candidatus Sulcia muelleri isolate SMAURBIH`.

::: {.callout-note code-copy="true" eval="false" collapse="true"}
grep -E -o "(Candidatus Sulcia muelleri\|Blattabacterium cuenoti)( str.\| strain\| \| isolate) ?\[A-Za-z-\]{2,10}" sul_genomas.fasta \> nombres_sul_genomas.txt
:::

## Extracción de información de archivos fastq

En este ejercicio se obtendrá información de archivos fastq, que cotienen secuencias de nucleótidos y la calidad de su proceso de secuenciación. Para esto usaremos los archivos `secuencias1.fastq`, `secuencias2.fastq` y `secuencias3.fastq` que se encuentra en la carpeta `_files` dentro del directorio raíz del repositorio de GitHub [unix.bioinfo.rsgecuador](https://github.com/RSG-Ecuador/unix.bioinfo.rsgecuador/tree/gh-pages) .

**Ejercicio** La letra `N` representa un nucleótido que no pudo ser leído correctamente, y se reporta como ninguno, o `missing data`. Imprime el número de secuencias que tenga diez `N` seguidas por cada uno de los archivos `fastq` de la carpeta `_files`.

::: callout-note
Es posible realizar esto con un comando de una sola línea, intenta resolverlo de esta forma.
:::

::: {.callout-note code-copy="true" eval="false" collapse="true"}
```         
grep -E -c "NNNNNNNNNN"  *.fastq
```
:::

Aunque tambien puedes crear un script mas diseñado

:::: callout-note
crea un archivo que se llame countsseq.sh y pega el siguiente codigo

::: {.callout-note code-copy="true" eval="false" collapse="true"}
#!/bin/bash \# File: countseq.sh

# Ruta a la carpeta que contiene los archivos .fastq

FOLDER="\_files"

# Iterar sobre cada archivo .fastq en la carpeta

for file in "\$FOLDER"/\*\[1-3\].fastq; do \# Imprimir el nombre del archivo echo "Archivo: \$file"

\# Usar grep para buscar secuencias que contengan 10 'N' seguidas y contar cuántas veces aparecen count=\$(grep -c 'NNNNNNNNNN' \$file )

\# Imprimir el número de secuencias encontradas echo "Número de secuencias con 10 N seguidas: \$count" echo "---------------------------------------" done
:::

Recuerda para ejecutar este codigo deberas encontrarte dentro de la carpeta descomprimida `unix.bioinfo.rsgecuador-gh-pages/`y ejecutar: `bash countseq.sh`

Salida:

-   `secuencias1.fastq` - 1

-   `secuencias2.fastq` - 58

-   `secuencias3.fastq` - 75
::::

4.- Cuenta cuántas secuencias únicas hay en cada archivo.

Determina cuántas secuencias únicas (sin repeticiones) existen en cada archivo. Asegúrate de ignorar las líneas que comienzan con \@ o +, ya que no forman parte de las secuencias.

::: callout-note
## pista

Usa grep para extraer solo las líneas correspondientes a las secuencias y después sort y uniq para contarlas.
:::

Recuerda que los archivos se encuentran en unix.bioinfo.rsgecuador-gh-pages/\_files/

::: {.callout-note code-copy="true" eval="false" collapse="true"}
# Extraer solo las secuencias (segunda línea de cada entrada)

grep -A 3 "\^\@" \*.fastq \| grep -v "\^\@" \| grep -v "+" \| grep -v "\^--\$" \> sequences_only.txt

# Contar las secuencias únicas

echo "Número de secuencias únicas: \$(sort sequences_only.txt \| uniq \| wc -l)"
:::

5.- **Encontrar la longitud de la secuencia más larga**

Determina la longitud de la secuencia más larga entre los archivos FASTQ.

::: {.callout-note code-copy="true" eval="false" collapse="true"}
grep -A 1 "\^\@" \*.fastq \| grep -v "\^\@" \| grep -v "\^--\$" \| wc -L
:::

Material suplementario

-   RSG Ecuador. [Scripts en Bash](https://rsg-ecuador.github.io/unix.bioinfo.rsgecuador/content/Curso_avanzado/02_Bash/1_bash.html)
-   RSG Ecuador. [Wildcards y Streams](https://rsg-ecuador.github.io/unix.bioinfo.rsgecuador/content/Curso_basico/03_Manejo_terminal/5_wildcards.html)
-   RSG Ecuador. [Expresiones regulares (*regex*)](https://rsg-ecuador.github.io/unix.bioinfo.rsgecuador/content/Curso_basico/04_Procesamiento_ficheros_regex_pipes/3_Expresiones_regulares.html)
-   [Wildcard Selection in Bash](https://pressbooks.senecapolytechnic.ca/uli101/chapter/wildcard-selection-in-bash/)
