# Condicionales

Las condicionales son estructuras de programación que nos permiten tomar decisiones basadas en el resultado de una **expresión**. En otras palabras, nos permiten ejecutar diferentes bloques de código dependiendo de **si una condición se cumple o no**. Los condicionales son fundamentales para automatizar tareas y crear scripts fléxibles.

La sintáxis básica de un condicional simple en formato de una línea es :

```         
if [ condición ]; then orden1; orden2 …; fi
```

de igual manera pero en bloque identado:}

if \[ condición \]; then orden1 orden2 fi

::: {.callout-note code-copy="true" eval="false"}
Si queremos verificar si existe el archivo **secuencias1.fastq** antes de realizar alguna operación sobre él. Puedes usar el siguiente condicional:
:::

``` {.bash code-copy="true" eval="false"}
Ejemplo

if [ -f secuencias1.fastq ]; then
  echo "El archivo existe."
else
  echo "El archivo no existe."
fi
```

::: callout-note
## Explicación

-   **`if [ -f secuencias1.fastq ]`:** Verifica si **secuencias1.fastq** es un archivo regular.

-   **`then`:** Si la condición es verdadera, se ejecuta el código siguiente.

-   **`else`:** Si la condición es falsa, se ejecuta el código siguiente.

-   **`fi`:** Indica el final de la estructura `if`.
:::

Los condicionales pueden ser tan complejos como lo imagines. Por ejemplo:

::: callout-note
## Quiero saber cuantas secuencias tiene cada archivo que termina en .fastq
:::

``` {.bash code-copy="true" eval="false"}
for archivo in $file*.fastq; do 
  if [ -f "$archivo" ]; then 
    echo "Procesando archivo: $archivo"
    wc -l "$archivo" 
  else 
    echo "No tienes archivos fastq"
  fi 
done
```

::: callout-note
## Explicación del código

En donde:

```         
for archivo in $file*.fastq; do
```

-   **`$file*.fastq`**: Expande a todos los archivos que comienzan con el valor de la variable `$file` y terminan con la extensión `.fastq`.

-   **`archivo`**: Variable que almacena el nombre de cada archivo encontrado.

```         
echo "Procesando archivo: $archivo"
wc -l "$archivo"
```

-   **`echo`**: Imprime el mensaje indicando que se está procesando el archivo actual.

-   **`wc -l "$archivo"`**: Cuenta el número de líneas en el archivo usando `wc -l` y muestra el resultado en la terminal.

```         
else
  echo "No tienes archivos fastq"
fi
```

-   Si el archivo no existe o no es un archivo regular, muestra un mensaje de error indicando el problema.

```         
done
```

-   Fin del bucle
:::

# **Bucles (for loops)**

Imagina que quieres realizar una misma tarea para 3 archivos distintos, ¿no sería nada molesto escribir el mismo código 3 veces, cierto?

¿Y qué pasa si tengo que analizar y procesar docenas o cientos de archivos? Para ello puedes escribir bucles. Un bucle es una **estructura de control** que permite ejecutar un bloque de código rápidamente mientras se cumpla una **determinada condición**. En bash los bucles más comunes son `for` y `while.`

::: callout-note
## for

`for` es ideal cuando sabes cuántas veces quieres que se repita ese bloque de código. Por ejemplo:
:::

::: callout-note
for variable in lista_de_valores; do \# Comandos a ejecutar para cada valor en la lista done
:::

::: callout-note
## while

while, por su parte, se utiliza cuando quieres que un bloque de código se ejecute mientras se cumpla una determinada condición. Por ejemplo:
:::

::: callout-note
while \[ condición \]; do \# Comandos a ejecutar mientras la condición sea verdadera done
:::

## **Actividad grupal**

Retomando el ejercicio anterior, modifiquemos el código para crear un bucle para procesar los tres archivos fastq (**secuencias1.fastq, secuencias2.fastq, secuencias3.fastq** ) que tenemos.

# Crear un directorio para los resultados si no existe

::: callout-note
mkdir -p resultados

cd resultados
:::

**Paso 1.** Crear un script en Bash con el nombre bucles.sh empleando nano.

``` {.bash code-copy="true" eval="false"}
nano bucles.sh
```

**Paso 2.** Copia el siguiente código dentro del script `bucle.sh` y guarda los cambios.

::: {.callout-note code-copy="true" eval="false"}
#!/bin/bash \# Script para analizar múltiples archivos FASTQ

archivos=("secuencias1.fastq" "secuencias2.fastq" "secuencias3.fastq")

\# Loop para analizar cada archivo for archivo in "\${archivos\[\@\]}"; do echo "Archivo a procesar: \$archivo"

\# Verifica si el archivo existe if \[ ! -f "\$archivo" \]; then echo "El archivo \$archivo no existe. Saltando..." continue fi

\# 1. Conteo de secuencias numero_secuencias=\$(grep -c '\^\@SRR098026' "\$archivo") echo "Número de secuencias en \$archivo: \$numero_secuencias"

\# 2. Separación de malas lecturas grep -B1 -A2 'NNNNNNNNNN' "\$archivo" \> "malas_lecturas\_\$archivo" malas=\$(wc -l \< "malas_lecturas\_\$archivo") echo "Número de malas lecturas en \$archivo: \$malas"

\# 3. Búsqueda de patrones echo "Desea buscar patrones en \$archivo? (y/n):" read -r respuesta

if \[\[ "\$respuesta" == "y" \]\]; then patrones_file="patrones\_\$archivo.txt" busqueda_file="busqueda\_\$archivo.txt"

echo -e 'ACTG\\nCCCCC\\nNNNCNNN\\nNNNGNNN\\nTTTT\\nTATA\\nAAA' \> "\$patrones_file" grep -f "\$patrones_file" "\$archivo" \> "\$busqueda_file"

echo "Búsqueda de patrones guardada en: \$busqueda_file" else echo "Patrones no buscados en \$archivo." fi

echo "Procesamiento de \$archivo completado." echo "---------------------------------------" done

Mensaje final

echo "Metaanálisis finalizado para todos los archivos."
:::

**Paso 3.** Escribe bash bucle.sh

::: callout-note
## Explicación del código

-   1\. **Comentarios y declaración de archivo**

-   `#!/bin/bash`: Indica que el script se ejecutará usando el intérprete de Bash.

-   `# File: demo.sh`: Un comentario que indica el nombre del archivo del script.

-   2\. **Mostrar el archivo y número de argumentos**

-   `echo "Archivo a procesar > $@"`: Muestra el nombre del archivo que se pasará como argumento al script. `$@` representa todos los argumentos pasados al script.

-   `echo "Numero de argumentos: $#"`: Muestra cuántos argumentos ha recibido el script. `$#` indica el número de argumentos.

-   3\. **Contar secuencias y separar malas lecturas**

-   `numero_secuencias=$(grep -c '^@SRR098026' $@)`: Usa `grep` para contar cuántas secuencias empiezan con `@SRR098026` en el archivo (probablemente sea un prefijo en un archivo FASTQ que identifica secuencias de interés). `-c` cuenta las coincidencias.

-   `grep -B1 -A2 NNNNNNNNNN $@ > malas_lecturas.fastq`: Busca secuencias de calidad baja o problemáticas (que contengan 10 nucleótidos seguidos de `N`, que representan bases no determinadas).

    -   `-B1`: Muestra 1 línea antes de cada coincidencia de `NNNNNNNNNN`.

    -   `-A2`: Muestra 2 líneas después de la coincidencia.

    -   El resultado se guarda en un archivo llamado `malas_lecturas.fastq`.

-   `malas=$(cat malas_lecturas.fastq | wc -l)`: Cuenta el número total de líneas en `malas_lecturas.fastq` (esto indica la cantidad de malas lecturas encontradas).

-   `echo "Número de malas lecturas: $malas"`: Muestra la cantidad de malas lecturas encontradas

-   `echo "Numero de argumentos: $#"`: Muestra cuántos argumentos ha recibido el script. `$#` indica el número de argumentos.

-   4\. **Búsqueda de patrones**

-   `echo "Desea buscar patrones (y/n): "`: Pregunta al usuario si desea buscar patrones específicos en el archivo.

-   `read d`: Lee la respuesta del usuario y la guarda en la variable `d`.

-   `if [[ $d == "y" ]]; then`: Si la respuesta es "y" (sí), el script procede a buscar los patrones.

    -   `echo -e 'ACTG\nCCCCC\nNNNCNNN\nNNNGNNN\nTTTT\nTATA\nAAA' > patrones.txt`: Crea un archivo `patrones.txt` que contiene una lista de secuencias de interés (patrones a buscar).

    -   `grep -f patrones.txt $@ > busqueda.txt`: Busca los patrones contenidos en `patrones.txt` dentro del archivo de entrada. El resultado de la búsqueda se guarda en `busqueda.txt`.

    -   `echo "Búsqueda de patrones guardada en: busqueda.txt"`: Informa al usuario que los resultados de la búsqueda se guardaron en el archivo `busqueda.txt`.

-   `else`: Si la respuesta es "n" (no), simplemente muestra un mensaje.
:::
